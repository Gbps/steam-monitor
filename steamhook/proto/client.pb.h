// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_client_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsC2SMessageImpl();
void InitDefaultsC2SMessage();
void InitDefaultsClientHelloImpl();
void InitDefaultsClientHello();
inline void InitDefaults() {
  InitDefaultsC2SMessage();
  InitDefaultsClientHello();
}
}  // namespace protobuf_client_2eproto
namespace steamhook {
class C2SMessage;
class C2SMessageDefaultTypeInternal;
extern C2SMessageDefaultTypeInternal _C2SMessage_default_instance_;
class ClientHello;
class ClientHelloDefaultTypeInternal;
extern ClientHelloDefaultTypeInternal _ClientHello_default_instance_;
}  // namespace steamhook
namespace steamhook {

enum C2SMessage_C2SMessageType {
  C2SMessage_C2SMessageType_CLIENT_HELLO = 0,
  C2SMessage_C2SMessageType_C2SMessage_C2SMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  C2SMessage_C2SMessageType_C2SMessage_C2SMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool C2SMessage_C2SMessageType_IsValid(int value);
const C2SMessage_C2SMessageType C2SMessage_C2SMessageType_C2SMessageType_MIN = C2SMessage_C2SMessageType_CLIENT_HELLO;
const C2SMessage_C2SMessageType C2SMessage_C2SMessageType_C2SMessageType_MAX = C2SMessage_C2SMessageType_CLIENT_HELLO;
const int C2SMessage_C2SMessageType_C2SMessageType_ARRAYSIZE = C2SMessage_C2SMessageType_C2SMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* C2SMessage_C2SMessageType_descriptor();
inline const ::std::string& C2SMessage_C2SMessageType_Name(C2SMessage_C2SMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    C2SMessage_C2SMessageType_descriptor(), value);
}
inline bool C2SMessage_C2SMessageType_Parse(
    const ::std::string& name, C2SMessage_C2SMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<C2SMessage_C2SMessageType>(
    C2SMessage_C2SMessageType_descriptor(), name, value);
}
// ===================================================================

class C2SMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:steamhook.C2SMessage) */ {
 public:
  C2SMessage();
  virtual ~C2SMessage();

  C2SMessage(const C2SMessage& from);

  inline C2SMessage& operator=(const C2SMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  C2SMessage(C2SMessage&& from) noexcept
    : C2SMessage() {
    *this = ::std::move(from);
  }

  inline C2SMessage& operator=(C2SMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const C2SMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2SMessage* internal_default_instance() {
    return reinterpret_cast<const C2SMessage*>(
               &_C2SMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(C2SMessage* other);
  friend void swap(C2SMessage& a, C2SMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline C2SMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  C2SMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const C2SMessage& from);
  void MergeFrom(const C2SMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(C2SMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef C2SMessage_C2SMessageType C2SMessageType;
  static const C2SMessageType CLIENT_HELLO =
    C2SMessage_C2SMessageType_CLIENT_HELLO;
  static inline bool C2SMessageType_IsValid(int value) {
    return C2SMessage_C2SMessageType_IsValid(value);
  }
  static const C2SMessageType C2SMessageType_MIN =
    C2SMessage_C2SMessageType_C2SMessageType_MIN;
  static const C2SMessageType C2SMessageType_MAX =
    C2SMessage_C2SMessageType_C2SMessageType_MAX;
  static const int C2SMessageType_ARRAYSIZE =
    C2SMessage_C2SMessageType_C2SMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  C2SMessageType_descriptor() {
    return C2SMessage_C2SMessageType_descriptor();
  }
  static inline const ::std::string& C2SMessageType_Name(C2SMessageType value) {
    return C2SMessage_C2SMessageType_Name(value);
  }
  static inline bool C2SMessageType_Parse(const ::std::string& name,
      C2SMessageType* value) {
    return C2SMessage_C2SMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .steamhook.C2SMessage.C2SMessageType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::steamhook::C2SMessage_C2SMessageType type() const;
  void set_type(::steamhook::C2SMessage_C2SMessageType value);

  // @@protoc_insertion_point(class_scope:steamhook.C2SMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_client_2eproto::TableStruct;
  friend void ::protobuf_client_2eproto::InitDefaultsC2SMessageImpl();
};
// -------------------------------------------------------------------

class ClientHello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:steamhook.ClientHello) */ {
 public:
  ClientHello();
  virtual ~ClientHello();

  ClientHello(const ClientHello& from);

  inline ClientHello& operator=(const ClientHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientHello(ClientHello&& from) noexcept
    : ClientHello() {
    *this = ::std::move(from);
  }

  inline ClientHello& operator=(ClientHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientHello* internal_default_instance() {
    return reinterpret_cast<const ClientHello*>(
               &_ClientHello_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ClientHello* other);
  friend void swap(ClientHello& a, ClientHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientHello* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientHello* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientHello& from);
  void MergeFrom(const ClientHello& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 processid = 1;
  void clear_processid();
  static const int kProcessidFieldNumber = 1;
  ::google::protobuf::int32 processid() const;
  void set_processid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:steamhook.ClientHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 processid_;
  mutable int _cached_size_;
  friend struct ::protobuf_client_2eproto::TableStruct;
  friend void ::protobuf_client_2eproto::InitDefaultsClientHelloImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2SMessage

// .steamhook.C2SMessage.C2SMessageType Type = 1;
inline void C2SMessage::clear_type() {
  type_ = 0;
}
inline ::steamhook::C2SMessage_C2SMessageType C2SMessage::type() const {
  // @@protoc_insertion_point(field_get:steamhook.C2SMessage.Type)
  return static_cast< ::steamhook::C2SMessage_C2SMessageType >(type_);
}
inline void C2SMessage::set_type(::steamhook::C2SMessage_C2SMessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:steamhook.C2SMessage.Type)
}

// -------------------------------------------------------------------

// ClientHello

// int32 processid = 1;
inline void ClientHello::clear_processid() {
  processid_ = 0;
}
inline ::google::protobuf::int32 ClientHello::processid() const {
  // @@protoc_insertion_point(field_get:steamhook.ClientHello.processid)
  return processid_;
}
inline void ClientHello::set_processid(::google::protobuf::int32 value) {
  
  processid_ = value;
  // @@protoc_insertion_point(field_set:steamhook.ClientHello.processid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steamhook

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::steamhook::C2SMessage_C2SMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::steamhook::C2SMessage_C2SMessageType>() {
  return ::steamhook::C2SMessage_C2SMessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
