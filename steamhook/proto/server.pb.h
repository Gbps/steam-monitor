// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#ifndef PROTOBUF_server_2eproto__INCLUDED
#define PROTOBUF_server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_server_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsS2CMessageImpl();
void InitDefaultsS2CMessage();
void InitDefaultsServerHelloImpl();
void InitDefaultsServerHello();
inline void InitDefaults() {
  InitDefaultsS2CMessage();
  InitDefaultsServerHello();
}
}  // namespace protobuf_server_2eproto
namespace steamhook {
class S2CMessage;
class S2CMessageDefaultTypeInternal;
extern S2CMessageDefaultTypeInternal _S2CMessage_default_instance_;
class ServerHello;
class ServerHelloDefaultTypeInternal;
extern ServerHelloDefaultTypeInternal _ServerHello_default_instance_;
}  // namespace steamhook
namespace steamhook {

enum S2CMessage_S2CMessageType {
  S2CMessage_S2CMessageType_SERVER_HELLO = 0,
  S2CMessage_S2CMessageType_S2CMessage_S2CMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  S2CMessage_S2CMessageType_S2CMessage_S2CMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool S2CMessage_S2CMessageType_IsValid(int value);
const S2CMessage_S2CMessageType S2CMessage_S2CMessageType_S2CMessageType_MIN = S2CMessage_S2CMessageType_SERVER_HELLO;
const S2CMessage_S2CMessageType S2CMessage_S2CMessageType_S2CMessageType_MAX = S2CMessage_S2CMessageType_SERVER_HELLO;
const int S2CMessage_S2CMessageType_S2CMessageType_ARRAYSIZE = S2CMessage_S2CMessageType_S2CMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* S2CMessage_S2CMessageType_descriptor();
inline const ::std::string& S2CMessage_S2CMessageType_Name(S2CMessage_S2CMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    S2CMessage_S2CMessageType_descriptor(), value);
}
inline bool S2CMessage_S2CMessageType_Parse(
    const ::std::string& name, S2CMessage_S2CMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<S2CMessage_S2CMessageType>(
    S2CMessage_S2CMessageType_descriptor(), name, value);
}
// ===================================================================

class S2CMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:steamhook.S2CMessage) */ {
 public:
  S2CMessage();
  virtual ~S2CMessage();

  S2CMessage(const S2CMessage& from);

  inline S2CMessage& operator=(const S2CMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2CMessage(S2CMessage&& from) noexcept
    : S2CMessage() {
    *this = ::std::move(from);
  }

  inline S2CMessage& operator=(S2CMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2CMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2CMessage* internal_default_instance() {
    return reinterpret_cast<const S2CMessage*>(
               &_S2CMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(S2CMessage* other);
  friend void swap(S2CMessage& a, S2CMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2CMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  S2CMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const S2CMessage& from);
  void MergeFrom(const S2CMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(S2CMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef S2CMessage_S2CMessageType S2CMessageType;
  static const S2CMessageType SERVER_HELLO =
    S2CMessage_S2CMessageType_SERVER_HELLO;
  static inline bool S2CMessageType_IsValid(int value) {
    return S2CMessage_S2CMessageType_IsValid(value);
  }
  static const S2CMessageType S2CMessageType_MIN =
    S2CMessage_S2CMessageType_S2CMessageType_MIN;
  static const S2CMessageType S2CMessageType_MAX =
    S2CMessage_S2CMessageType_S2CMessageType_MAX;
  static const int S2CMessageType_ARRAYSIZE =
    S2CMessage_S2CMessageType_S2CMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  S2CMessageType_descriptor() {
    return S2CMessage_S2CMessageType_descriptor();
  }
  static inline const ::std::string& S2CMessageType_Name(S2CMessageType value) {
    return S2CMessage_S2CMessageType_Name(value);
  }
  static inline bool S2CMessageType_Parse(const ::std::string& name,
      S2CMessageType* value) {
    return S2CMessage_S2CMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .steamhook.S2CMessage.S2CMessageType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::steamhook::S2CMessage_S2CMessageType type() const;
  void set_type(::steamhook::S2CMessage_S2CMessageType value);

  // @@protoc_insertion_point(class_scope:steamhook.S2CMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
  friend void ::protobuf_server_2eproto::InitDefaultsS2CMessageImpl();
};
// -------------------------------------------------------------------

class ServerHello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:steamhook.ServerHello) */ {
 public:
  ServerHello();
  virtual ~ServerHello();

  ServerHello(const ServerHello& from);

  inline ServerHello& operator=(const ServerHello& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerHello(ServerHello&& from) noexcept
    : ServerHello() {
    *this = ::std::move(from);
  }

  inline ServerHello& operator=(ServerHello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerHello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerHello* internal_default_instance() {
    return reinterpret_cast<const ServerHello*>(
               &_ServerHello_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerHello* other);
  friend void swap(ServerHello& a, ServerHello& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerHello* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerHello* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerHello& from);
  void MergeFrom(const ServerHello& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerHello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 processid = 1;
  void clear_processid();
  static const int kProcessidFieldNumber = 1;
  ::google::protobuf::int32 processid() const;
  void set_processid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:steamhook.ServerHello)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 processid_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_2eproto::TableStruct;
  friend void ::protobuf_server_2eproto::InitDefaultsServerHelloImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2CMessage

// .steamhook.S2CMessage.S2CMessageType Type = 1;
inline void S2CMessage::clear_type() {
  type_ = 0;
}
inline ::steamhook::S2CMessage_S2CMessageType S2CMessage::type() const {
  // @@protoc_insertion_point(field_get:steamhook.S2CMessage.Type)
  return static_cast< ::steamhook::S2CMessage_S2CMessageType >(type_);
}
inline void S2CMessage::set_type(::steamhook::S2CMessage_S2CMessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:steamhook.S2CMessage.Type)
}

// -------------------------------------------------------------------

// ServerHello

// int32 processid = 1;
inline void ServerHello::clear_processid() {
  processid_ = 0;
}
inline ::google::protobuf::int32 ServerHello::processid() const {
  // @@protoc_insertion_point(field_get:steamhook.ServerHello.processid)
  return processid_;
}
inline void ServerHello::set_processid(::google::protobuf::int32 value) {
  
  processid_ = value;
  // @@protoc_insertion_point(field_set:steamhook.ServerHello.processid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace steamhook

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::steamhook::S2CMessage_S2CMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::steamhook::S2CMessage_S2CMessageType>() {
  return ::steamhook::S2CMessage_S2CMessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_2eproto__INCLUDED
